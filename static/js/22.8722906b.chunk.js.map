{"version":3,"sources":["_nav.js","routes.js","containers/DefaultLayout/DefaultLayout.js","actions/versionActions.js"],"names":["items","name","url","icon","MyDashboard","React","lazy","Home","ShowConfig","RemoteExplorerLayout","routes","path","exact","component","DefaultFooter","DefaultHeader","VERSION_NAV_ITEM_ATTRS","attributes","target","class","variant","DefaultLayout","Component","loading","className","navigation","this","props","version","componentDidMount","localStorage","getItem","AUTH_KEY","getVersion","history","push","render","data-test","ErrorBoundary","fixed","fallback","onLogout","e","signOut","display","navConfig","appRoutes","Container","fluid","map","route","idx","key","from","to","connect","state","isConnected","status","dispatch","getRcloneVersion","then","res","type","GET_VERSION","REQUEST_SUCCESS","payload","error","REQUEST_ERROR"],"mappings":"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","file":"static/js/22.8722906b.chunk.js","sourcesContent":["export default {\n    items: [\n        {\n            name: 'Dashboard',\n            url: '/dashboard',\n            icon: 'icon-speedometer'\n        },\n        {\n            name: 'Configs',\n            url: '/showconfig',\n            icon: 'icon-note'\n        },\n        {\n            name: 'Explorer',\n            url: '/remoteExplorer',\n            icon: 'icon-screen-desktop'\n        },\n        {\n            name: 'Backend',\n            url: '/rcloneBackend',\n            icon: 'icon-star',\n        },\n        {\n            name: 'Mounts',\n            url: '/mountDashboard',\n            icon: 'fa fa-hdd-o'\n        },\n        {\n            name: 'Log Out',\n            url: '/login',\n            icon: 'icon-logout',\n        },\n\n    ],\n};\n","import React from 'react';\n\nconst MyDashboard = React.lazy(() => import('./views/RemoteManagement/NewDrive'));\nconst Home = React.lazy(() => import('./views/Home'));\nconst ShowConfig = React.lazy(() => import('./views/RemoteManagement/ShowConfig'));\nconst RemoteExplorerLayout = React.lazy(() => import(\"./views/Explorer/RemoteExplorerLayout\"));\nconst Login = React.lazy(() => import(\"./views/Pages/Login\"));\nconst RCloneDashboard = React.lazy(() => import(\"./views/RCloneDashboard\"));\nconst MountDashboard = React.lazy(() => import(\"./views/MountDashboard\"));\n\n// https://github.com/ReactTraining/react-router/tree/master/packages/react-router-config\n// Define the routes as required\nconst routes = [\n    {path: '/', exact: true, name: 'Home'},\n    {path: '/newdrive/edit/:drivePrefix', name: 'Edit Remote', component: MyDashboard},\n    {path: '/newdrive', exact: true, name: 'New Remote', component: MyDashboard},\n    {path: '/login', exact: true, name: 'Login Page', component: Login},\n    {path: '/dashboard', name: 'Dashboard', component: Home},\n    {path: '/showconfig', name: 'Configs', component: ShowConfig},\n    {path: '/remoteExplorer/:remoteName/:remotePath', exact: true, name: 'Explorer', component: RemoteExplorerLayout},\n    {path: '/remoteExplorer', name: 'Explorer', component: RemoteExplorerLayout},\n    {path: '/rcloneBackend', name: 'Rclone Backend', component: RCloneDashboard},\n    {path: '/mountDashboard', name: 'Mount Dashboard', component: MountDashboard},\n\n];\n\nexport default routes;\n","import React, {Component, Suspense} from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\nimport {Container} from 'reactstrap';\nimport {getVersion} from \"../../actions/versionActions\";\n\nimport {\n    AppBreadcrumb,\n    AppFooter,\n    AppHeader,\n    AppSidebar,\n    AppSidebarFooter,\n    AppSidebarForm,\n    AppSidebarHeader,\n    AppSidebarMinimizer,\n    AppSidebarNav,\n} from '@coreui/react';\n// sidebar nav config\nimport navigation from '../../_nav';\n// routes config\nimport routes from '../../routes';\nimport {connect} from \"react-redux\";\nimport {AUTH_KEY} from \"../../utils/Constants\";\nimport ErrorBoundary from \"../../ErrorHandling/ErrorBoundary\";\n\n// const DefaultAside = React.lazy(() => import('./DefaultAside'));\nconst DefaultFooter = React.lazy(() => import('./DefaultFooter'));\nconst DefaultHeader = React.lazy(() => import('./DefaultHeader'));\n\nconst VERSION_NAV_ITEM_ATTRS = {\n    attributes: { target: '_blank' },\n    class: 'mt-auto',\n    icon: 'cui-cog',\n    url: 'https://rclone.org/changelog',\n    variant: 'success'\n}\nclass DefaultLayout extends Component {\n\n    loading = () => <div className=\"animated fadeIn pt-1 text-center\">Loading...</div>;\n\n    get navConfig() {\n        return {\n            items: [\n                ...navigation.items,\n                {\n                    name: this.props.version.version,\n                    ...VERSION_NAV_ITEM_ATTRS\n                }\n            ]\n        }\n    }\n\n    componentDidMount() {\n        if (!localStorage.getItem(AUTH_KEY)) {\n            this.props.history.push('/login');\n        } else {\n            this.props.getVersion();\n        }\n    }\n\n    render() {\n        // console.log(\"isConnected, default layout\", this.props.isConnected);\n        return (\n\n\n            <div className=\"app\" data-test=\"defaultLayout\">\n                <ErrorBoundary>\n                    <AppHeader fixed>\n                        <Suspense fallback={this.loading()}>\n                            <DefaultHeader onLogout={e => this.signOut(e)}/>\n                        </Suspense>\n                    </AppHeader>\n                    <div className=\"app-body\">\n                        <AppSidebar fixed display=\"lg\">\n                            <AppSidebarHeader/>\n                            <AppSidebarForm/>\n                            <Suspense fallback={this.loading()}>\n                                <AppSidebarNav navConfig={this.navConfig} />\n                            </Suspense>\n                            <AppSidebarFooter/>\n                            <AppSidebarMinimizer/>\n                        </AppSidebar>\n                        <main className=\"main\">\n                            <AppBreadcrumb appRoutes={routes}/>\n                            <Container fluid>\n                                <Suspense fallback={this.loading()}>\n                                    <Switch>\n                                        {\n                                            routes.map((route, idx) => {\n                                                return route.component ? (\n                                                    <Route\n                                                        key={idx}\n                                                        path={route.path}\n                                                        exact={route.exact}\n                                                        name={route.name}\n                                                        render={props => (\n                                                            <route.component {...props} />\n                                                        )}/>\n                                                ) : (null);\n                                            })\n                                        }\n                                        <Redirect from=\"/\" to=\"/dashboard\"/>\n                                    </Switch>\n                                </Suspense>\n                            </Container>\n                        </main>\n                    </div>\n                    <AppFooter>\n                        <Suspense fallback={this.loading()}>\n                            <DefaultFooter/>\n                        </Suspense>\n                    </AppFooter>\n                </ErrorBoundary>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    isConnected: state.status.isConnected,\n    version: state.version,\n});\n\nexport default connect(mapStateToProps, { getVersion })(DefaultLayout);\n","import {GET_VERSION, REQUEST_ERROR, REQUEST_SUCCESS} from './types';\nimport {getRcloneVersion} from \"rclone-api\";\n\nexport const getVersion = () => {\n    return dispatch => {\n        getRcloneVersion().then(\n            res =>\n                dispatch({\n                    type: GET_VERSION,\n                    status: REQUEST_SUCCESS,\n                    payload: res\n                }),\n            error =>\n                dispatch({\n                    type: GET_VERSION,\n                    status: REQUEST_ERROR,\n                    payload: error\n                })\n        );\n    };\n};\n"],"sourceRoot":""}