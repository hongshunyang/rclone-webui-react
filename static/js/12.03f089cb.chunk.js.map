{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","utils/RclonePropTypes.js","actions/explorerStateActions.js","actions/explorerActions.js","../node_modules/reactstrap/es/Form.js","views/Explorer/RemotesList/RemoteListAutoSuggest.js","views/Explorer/RemotesList/RemotesList.js","../node_modules/reactstrap/es/FormFeedback.js","../node_modules/reactstrap/es/Table.js","actions/mountActions.js","views/MountDashboard/NewMountModal.js","views/MountDashboard/MountDashboard.js"],"names":["_arrayLikeToArray","arr","len","length","i","arr2","Array","_slicedToArray","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","err","o","minLen","n","prototype","toString","call","slice","constructor","name","from","test","TypeError","PropTypes","Features","isRequired","Hashes","Name","Precision","String","remoteName","remotePath","Path","Size","MimeType","ModTime","IsDir","rate","changePath","containerID","dispatch","type","CHANGE_PATH","id","getFilesForContainerID","changeRemoteName","CHANGE_REMOTE_NAME","getState","explorer","currentPaths","getFiles","changeRemotePath","CHANGE_REMOTE_PATH","createPath","CREATE_PATH","removePath","REMOVE_PATH","navigateUp","NAVIGATE_UP","navigateFwd","NAVIGATE_FWD","navigateBack","NAVIGATE_BACK","changeVisibilityFilter","filter","CHANGE_VISIBILITY_FILTER","changeGridMode","mode","CHANGE_GRID_MODE","setSearchQuery","searchQuery","CHANGE_SEARCH_QUERY","setLoadImages","shouldLoad","CHANGE_LOAD_IMAGES","payload","changeSortFilter","sortFilter","sortFilterAscending","CHANGE_SORT_FILTER","getFsInfo","getRemoteInfo","then","res","GET_CONFIG_FOR_REMOTE","status","REQUEST_SUCCESS","split","error","REQUEST_ERROR","getRemoteNames","state","remote","remotes","getAllRemoteNames","GET_REMOTE_LIST","path","getFilesList","GET_FILES_LIST","filesList","list","changeNumCols","numCols","Error","CHANGE_LAYOUT_COLS","addRemoteContainer","paneID","uniqueID","makeUniqueID","changeActiveRemoteContainer","ADD_LAYOUT_CONTAINER","removeRemoteContainer","REMOVE_LAYOUT_CONTAINER","CHANGE_ACTIVE_REMOTE_CONTAINER","changeDistractionFreeMode","shouldEnable","CHANGE_DISTRACTION_FREE_MODE","propTypes","children","node","inline","bool","tag","tagPropType","innerRef","oneOfType","object","func","string","className","cssModule","Form","_Component","props","_this","this","getRef","bind","_assertThisInitialized","submit","_inheritsLoose","_proto","ref","render","_this$props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","Component","defaultProps","getSuggestions","config","inputValue","trim","toLowerCase","inputLength","lang","getSuggestionValue","suggestion","renderSuggestion","RemoteListAutoSuggest","super","onSuggestionsFetchRequested","setState","suggestions","onSuggestionsClearRequested","inputProps","placeholder","onChange","highlightFirstSuggestion","style","width","RemotesList","shouldUpdateRemoteName","event","newValue","indexOf","openButtonText","openRemote","e","preventDefault","handleChangeRemoteName","isEmpty","openEnabled","componentDidMount","hasError","role","aria-label","onSubmit","Col","xs","sm","lg","Button","color","connect","ownProps","currentPath","valid","tooltip","FormFeedback","validMode","size","bordered","borderless","striped","dark","hover","responsive","responsiveTag","Table","ResponsiveTag","table","responsiveClassName","getMountList","axiosInstance","post","urls","listMounts","console","log","GET_MOUNT_LIST","data","NewMountModal","buttonLabel","okHandle","useState","modal","setModal","mountFs","setMountFs","mountPoint","setMountPoint","toggle","data-test","onClick","Modal","isOpen","ModalHeader","ModalBody","FormGroup","row","Label","for","Input","target","required","ModalFooter","disabled","MountDashboard","context","handleRemoveMount","item","unmount","MountPoint","handleCreateNewMount","addMount","handleUnmountAll","unmountAll","showNewMountCard","currentMounts","Row","map","index","key","Date","MountedOn","toLocaleTimeString","Fs","mount","fs","mountType","endsWith","CREATE_MOUNT","createMount","REMOVE_MOUNT","removeMount"],"mappings":"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","file":"static/js/12.03f089cb.chunk.js","sourcesContent":["export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import * as PropTypes from \"prop-types\";\n\nexport const PROP_FS_INFO = PropTypes.oneOfType([\n    PropTypes.shape({\n        Features: PropTypes.object.isRequired,\n        Hashes: PropTypes.array.isRequired,\n        Name: PropTypes.string.isRequired,\n        Precision: PropTypes.number.isRequired,\n        String: PropTypes.string.isRequired\n    }),\n    PropTypes.object\n]);\n\nexport const PROP_CURRENT_PATH = PropTypes.shape({\n    remoteName: PropTypes.string.isRequired,\n    remotePath: PropTypes.string.isRequired\n});\n\nexport const PROP_CONTAINER_ID = PropTypes.string;\n\nexport const PROP_LOAD_IMAGES_BOOL = PropTypes.bool;\n\nexport const PROP_IN_VIEWPORT = PropTypes.bool;\n\nexport const PROP_ITEM = PropTypes.shape({\n\n    Path: PropTypes.string.isRequired,\n    Name: PropTypes.string.isRequired,\n    Size: PropTypes.number,\n    MimeType: PropTypes.string,\n    ModTime: PropTypes.string.isRequired,\n    IsDir: PropTypes.bool.isRequired\n\n});\n\nexport const PROP_BANDWIDTH = PropTypes.shape({\n    // bytesPerSecond: PropTypes.number.isRequired,\n    rate: PropTypes.string.isRequired\n\n});\n","import {\n    CHANGE_GRID_MODE,\n    CHANGE_LOAD_IMAGES,\n    CHANGE_PATH,\n    CHANGE_REMOTE_NAME,\n    CHANGE_REMOTE_PATH,\n    CHANGE_SEARCH_QUERY,\n    CHANGE_SORT_FILTER,\n    CHANGE_VISIBILITY_FILTER,\n    CREATE_PATH,\n    NAVIGATE_BACK,\n    NAVIGATE_FWD,\n    NAVIGATE_UP,\n    REMOVE_PATH\n} from \"./types\";\nimport {getFiles} from \"./explorerActions\";\n\n/**\n * Changes the current path of a container using container ID\n * @param containerID {string}\n * @param remoteName {string} Name of the remote config/ (\"/\" for local path). May contain abc:bucketName for bucket based remotes\n * @param remotePath {string} Name of the path in the remote. eg: /tmp\n * @returns {Function}\n */\nexport const changePath = (containerID, remoteName, remotePath) => {\n    return (dispatch) => {\n        dispatch({\n            type: CHANGE_PATH,\n            remoteName: remoteName,\n            id: containerID,\n            remotePath: remotePath\n        });\n        dispatch(getFilesForContainerID(containerID))\n    }\n};\n\n/**\n * Changes the current remote name for a particular container id\n * @param containerID {string}\n * @param remoteName {string}\n * @returns {Function}\n */\nexport const changeRemoteName = (containerID, remoteName) => {\n\n    return (dispatch) => {\n        dispatch({\n            type: CHANGE_REMOTE_NAME,\n            remoteName: remoteName,\n            id: containerID,\n            remotePath: \"\"\n        });\n\n        dispatch(getFilesForContainerID(containerID))\n    }\n};\n\n/**\n * Issues a request to fetch the files in the current path of a container using container id.\n * @param containerID\n * @returns {Function}\n */\nexport const getFilesForContainerID = (containerID) => {\n\n    return (dispatch, getState) => {\n        const state = getState();\n        const {remoteName, remotePath} = state.explorer.currentPaths[containerID];\n        if (remoteName && remoteName !== \"\")\n            dispatch(getFiles(remoteName, remotePath));\n    }\n};\n\n/**\n * Changes the current remote path for a container ID without changing the remote name.\n * @param containerID {string}\n * @param remotePath {string}\n * @returns {Function}\n */\nexport const changeRemotePath = (containerID, remotePath) => {\n    return (dispatch) => {\n        dispatch({\n            type: CHANGE_REMOTE_PATH,\n            id: containerID,\n            remotePath: remotePath\n        });\n        dispatch(getFilesForContainerID(containerID))\n    }\n};\n\n/**\n * Creates an empty path for initialization of a container.\n * @param containerID {string}\n * @returns {Function}\n */\nexport const createPath = (containerID) => dispatch => {\n\n    dispatch({\n        type: CREATE_PATH,\n        id: containerID\n    })\n};\n\n\n/**\n * Creates an empty path for initialization of a container.\n * @param containerID {string}\n * @returns {Function}\n */\nexport const removePath = (containerID) => dispatch => {\n\n    dispatch({\n        type: REMOVE_PATH,\n        id: containerID\n    })\n};\n\n\n/**\n * Computes and requests the path for going one level up in the working directory.\n * Eg: /tmp/abc -> navigateUp -> /tmp\n * @param containerID\n * @returns {Function}\n */\nexport const navigateUp = (containerID) => dispatch => {\n\n    dispatch({\n        type: NAVIGATE_UP,\n        id: containerID\n    });\n    dispatch(getFilesForContainerID(containerID))\n\n};\n\n/**\n * Navigates one stack entry up.\n * Requires at least one backStack entry. (The navigateBack should have been called at least once).\n * @param containerID {string}\n * @returns {Function}\n */\nexport const navigateFwd = (containerID) => dispatch => {\n\n    dispatch({\n        type: NAVIGATE_FWD,\n        id: containerID\n    });\n    dispatch(getFilesForContainerID(containerID))\n\n};\n\n\n/**\n * Navigates to one stack entry back. Works when used with navigateFwd, navigateUp.\n * Also requests for files in the new path\n * @param containerID\n * @returns {Function}\n */\nexport const navigateBack = (containerID) => dispatch => {\n\n    dispatch({\n        type: NAVIGATE_BACK,\n        id: containerID\n    });\n    dispatch(getFilesForContainerID(containerID))\n\n};\n\n/**\n * Changes the visibility filter for a given container, the filter may contain values like Images, Videos to enable viewing of only those type of file inside a container.\n * @param containerID\n * @param filter {string}\n * @returns {Function}\n */\nexport const changeVisibilityFilter = (containerID, filter) => dispatch => {\n    dispatch({\n        type: CHANGE_VISIBILITY_FILTER,\n        id: containerID,\n        filter\n    })\n};\n\n/**\n * Changes the view from Grid Mode to Card Mode or Card Mode to Grid Mode\n * @param containerID\n * @param mode {string}\n * @returns {Function}\n */\nexport const changeGridMode = (containerID, mode) => dispatch => {\n    dispatch({\n        type: CHANGE_GRID_MODE,\n        id: containerID,\n        mode\n    })\n};\n\n/**\n * Changes the current search query to be searched in the container id. Filters the files and folders according to the new search query.\n * @param containerID\n * @param searchQuery\n * @returns {Function}\n */\nexport const setSearchQuery = (containerID, searchQuery) => dispatch => {\n    dispatch({\n        type: CHANGE_SEARCH_QUERY,\n        id: containerID,\n        searchQuery\n    })\n};\n\nexport const setLoadImages = (containerID, shouldLoad) => dispatch => {\n    dispatch({\n        type: CHANGE_LOAD_IMAGES,\n        id: containerID,\n        payload: shouldLoad\n    })\n};\n\nexport const changeSortFilter = (containerID, sortFilter, sortFilterAscending) => dispatch => {\n    dispatch({\n        type: CHANGE_SORT_FILTER,\n        id: containerID,\n        payload: {\n            sortFilter, \n            sortFilterAscending\n        }\n    })\n}\n\n","import {\n    ADD_LAYOUT_CONTAINER,\n    CHANGE_ACTIVE_REMOTE_CONTAINER,\n    CHANGE_DISTRACTION_FREE_MODE,\n    CHANGE_LAYOUT_COLS,\n    GET_CONFIG_FOR_REMOTE,\n    GET_FILES_LIST,\n    GET_REMOTE_LIST,\n    REMOVE_LAYOUT_CONTAINER,\n    REQUEST_ERROR,\n    REQUEST_SUCCESS\n} from \"./types\";\nimport {makeUniqueID} from \"../utils/Tools\";\nimport {createPath, removePath} from \"./explorerStateActions\";\nimport {getAllRemoteNames, getFilesList, getRemoteInfo} from \"rclone-api\"\n\n/**\n * Gets the information regarding features, hashes from the rclone backend. Stores into redux store.\n * @param remoteName {string} The name of the remote\n * @returns {Function}\n */\nexport const getFsInfo = (remoteName) => dispatch => {\n    // console.log(\"Actual: \", sentRemoteName);\n    getRemoteInfo(remoteName).then((res) => {\n            dispatch({\n                type: GET_CONFIG_FOR_REMOTE,\n                status: REQUEST_SUCCESS,\n                payload: {[remoteName.split(':')[0]]: res},\n\n            })\n        },\n        error => dispatch({\n            type: GET_CONFIG_FOR_REMOTE,\n            status: REQUEST_ERROR,\n            payload: error\n        }))\n\n};\n\n/**\n * Get only remote names from the rclone backend. Stores into redux store.\n * @returns {Function}\n */\n\nexport const getRemoteNames = () => {\n    return (dispatch, getState) => {\n        const state = getState();\n        // console.log(state);\n        if (!state.remote.remotes || state.remote.remotes.length < 1) {\n\n            getAllRemoteNames().then(res => dispatch({\n                type: GET_REMOTE_LIST,\n                status: REQUEST_SUCCESS,\n                payload: res.remotes\n            }), error => dispatch({\n                type: GET_REMOTE_LIST,\n                status: REQUEST_ERROR,\n                payload: error\n            }))\n        }\n    }\n};\n\n/**\n * Gets the files for a specified remote path (remoteName + remotePath). Stores into redux store.\n * @param remoteName {string} Name of the remote config/ (\"/\" for local path). May contain abc:bucketName for bucket based remotes\n * @param remotePath {string} Name of the path in the remote\n * @returns {Function}\n */\nexport const getFiles = (remoteName, remotePath) => dispatch => {\n    if (remoteName !== \"\") {\n        const path = `${remoteName}-${remotePath}`;\n        getFilesList(remoteName, remotePath).then(res => dispatch({\n                type: GET_FILES_LIST,\n                status: REQUEST_SUCCESS,\n                payload: {path: path, filesList: res.list}\n            }),\n            error => dispatch({\n                type: GET_FILES_LIST,\n                status: REQUEST_ERROR,\n                payload: {path: path, error}\n            })\n        )\n    }\n\n};\n\n/**\n * Changes the number of columns in current layout view.\n * @param mode          {string} Either \"vertical or horizontal, defines the split type\"\n * @param numCols       {number} Number of columns to create\n * @returns {Function}\n */\nexport const changeNumCols = (numCols, mode) => (dispatch) => {\n    if (!numCols || numCols < 0) throw new Error(`Invalid number of cols:${numCols}`);\n\n\n    // for (let i = 0; i < numCols; i++) {\n    //     dispatch(createPath(i.toString()))\n    // }\n\n    dispatch({\n        type: CHANGE_LAYOUT_COLS,\n        payload: {\n            numCols, mode\n        }\n    })\n};\n\n/**\n * Adds a new remote container.\n * @param paneID               {int} pane ID\n * @returns {Function}\n */\nexport const addRemoteContainer = (paneID) => (dispatch) => {\n    const uniqueID = makeUniqueID(3);\n    dispatch(createPath(uniqueID));\n    dispatch(changeActiveRemoteContainer(uniqueID, paneID));\n    dispatch({\n        type: ADD_LAYOUT_CONTAINER,\n        payload: {\n            containerID: uniqueID,\n            paneID\n        }\n    })\n};\n\n\n/**\n * Remove a new remote container.\n * @param containerID          {string} Container ID to remove\n * @param paneID               {int} pane ID\n * @returns {Function}\n */\nexport const removeRemoteContainer = (containerID, paneID) => (dispatch) => {\n    dispatch(removePath(containerID));\n    // console.log(\"Removing : \" + containerID);\n    dispatch({\n        type: REMOVE_LAYOUT_CONTAINER,\n        payload: {\n            containerID, paneID\n        }\n    })\n};\n\n/**\n * Change active remote container.\n * @param containerID          {string} Container ID to remove\n * @param paneID               {int} pane ID\n * @returns {Function}\n */\nexport const changeActiveRemoteContainer = (containerID, paneID) => (dispatch) => {\n    dispatch({\n        type: CHANGE_ACTIVE_REMOTE_CONTAINER,\n        payload: {\n            containerID,\n            paneID\n        }\n    })\n};\n\n/**\n * Enter or exit distraction free mode\n * @param shouldEnable  {boolean} Enable or disable distraction free mode.\n * @returns {Function}\n */\nexport const changeDistractionFreeMode = (shouldEnable) => dispatch => {\n    dispatch({\n        type: CHANGE_DISTRACTION_FREE_MODE,\n        payload: shouldEnable\n    })\n};\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  inline: PropTypes.bool,\n  tag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'form'\n};\n\nvar Form =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Form, _Component);\n\n  function Form(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.getRef = _this.getRef.bind(_assertThisInitialized(_this));\n    _this.submit = _this.submit.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = Form.prototype;\n\n  _proto.getRef = function getRef(ref) {\n    if (this.props.innerRef) {\n      this.props.innerRef(ref);\n    }\n\n    this.ref = ref;\n  };\n\n  _proto.submit = function submit() {\n    if (this.ref) {\n      this.ref.submit();\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        className = _this$props.className,\n        cssModule = _this$props.cssModule,\n        inline = _this$props.inline,\n        Tag = _this$props.tag,\n        innerRef = _this$props.innerRef,\n        attributes = _objectWithoutPropertiesLoose(_this$props, [\"className\", \"cssModule\", \"inline\", \"tag\", \"innerRef\"]);\n\n    var classes = mapToCssModules(classNames(className, inline ? 'form-inline' : false), cssModule);\n    return React.createElement(Tag, _extends({}, attributes, {\n      ref: innerRef,\n      className: classes\n    }));\n  };\n\n  return Form;\n}(Component);\n\nForm.propTypes = propTypes;\nForm.defaultProps = defaultProps;\nexport default Form;","import Autosuggest from 'react-autosuggest';\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = (config, value) => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    if (inputLength === 0) {\n        return config;\n\n    }\n\n    return inputLength === 0 ? [] : config.filter(lang =>\n        lang.toLowerCase().slice(0, inputLength) === inputValue\n    );\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n    <div>\n        {suggestion}\n    </div>\n);\n\nclass RemoteListAutoSuggest extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // Autosuggest is a controlled component.\n        // This means that you need to provide an input value\n        // and an onChange handler that updates this value (see below).\n        // Suggestions also need to be provided to the Autosuggest,\n        // and they are initially empty because the Autosuggest is closed.\n        this.state = {\n            suggestions: []\n        };\n    }\n\n\n    // Autosuggest will call this function every time you need to update suggestions.\n    // You already implemented this logic above, so just use it.\n    onSuggestionsFetchRequested = ({value}) => {\n        // console.log(value);\n        this.setState({\n            suggestions: getSuggestions(this.props.suggestions, value)\n        });\n    };\n\n    // Autosuggest will call this function every time you need to clear suggestions.\n    onSuggestionsClearRequested = () => {\n        this.setState({\n            suggestions: []\n        });\n    };\n\n    render() {\n        const {value, onChange} = this.props;\n\n\n        // Autosuggest will pass through all these props to the input.\n        const inputProps = {\n            placeholder: 'Type the name of remote you want to open',\n            value: value,\n            onChange: onChange\n        };\n\n        // Finally, render it!\n        return (\n            <Autosuggest\n                suggestions={this.state.suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                getSuggestionValue={getSuggestionValue}\n                renderSuggestion={renderSuggestion}\n                highlightFirstSuggestion={true}\n                inputProps={inputProps}\n                style={{width:\"100%\"}}\n            />\n        );\n    }\n}\n\nRemoteListAutoSuggest.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    suggestions: PropTypes.array.isRequired\n};\n\nexport default RemoteListAutoSuggest;","import React from 'react';\nimport RemoteListAutoSuggest from \"./RemoteListAutoSuggest\";\nimport {connect} from \"react-redux\";\nimport {getFsInfo, getRemoteNames} from \"../../../actions/explorerActions\";\nimport PropTypes from 'prop-types'\nimport {changeRemoteName} from \"../../../actions/explorerStateActions\";\nimport {Button, Col, Form} from \"reactstrap\";\nimport {PROP_CURRENT_PATH} from \"../../../utils/RclonePropTypes\";\n\nclass RemotesList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isEmpty: false,\n            remoteName: props.remoteName,\n            openEnabled: false,\n            openButtonText: \"Open\"\n        };\n    }\n\n    componentDidMount() {\n\n        this.props.getRemoteNames();\n    }\n\n    shouldUpdateRemoteName = (event, {newValue}) => {\n        if (newValue.indexOf('/') === 0) {\n            this.setState({\n                remoteName: newValue,\n                openButtonText: \"Open local path\",\n            });\n        } else {\n            this.setState({\n                remoteName: newValue,\n                openButtonText: \"Open\"\n            });\n        }\n    };\n\n    openRemote = (e) => {\n        e.preventDefault();\n        const {handleChangeRemoteName} = this.props;\n        const {remoteName} = this.state;\n\n        handleChangeRemoteName(remoteName);\n\n    };\n\n\n    render() {\n        const {isEmpty, remoteName} = this.state;\n        const {remotes} = this.props;\n        const {hasError} = this.props;\n        // const {updateRemoteNameHandle} = this.props;\n\n        if (hasError) {\n            return (\n                <div>\n                    Error loading remotes. Please try again.\n                </div>\n            )\n        } else if (isEmpty) {\n            return (\n                <div>\n                    Add some remotes to see them here <span role=\"img\" aria-label=\"sheep\">🐑</span>.\n                </div>);\n        } else {\n\n            return (\n                <Form onSubmit={this.openRemote} className=\"row\">\n                    \n                    <Col xs={12} sm={10} lg={10}>\n                        <RemoteListAutoSuggest value={remoteName} onChange={this.shouldUpdateRemoteName}\n                                                suggestions={remotes}/>\n                    </Col>\n                    <Col xs={12} sm={2} lg={2}>\n\n                        <Button className={\"btn-lg\"} color=\"success\">{this.state.openButtonText}</Button>\n                    </Col>\n                    \n                </Form>\n\n            );\n        }\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n    remotes: state.remote.remotes,\n    hasError: false,\n    error: state.remote.error,\n    currentPath: state.explorer.currentPaths[ownProps.containerID],\n});\n\nconst propTypes = {\n    remotes: PropTypes.array.isRequired,\n    error: PropTypes.object,\n    hasError: PropTypes.bool,\n    currentPath: PROP_CURRENT_PATH,\n    handleChangeRemoteName: PropTypes.func.isRequired,\n};\n\n\nconst defaultProps = {};\n\nRemotesList.propTypes = propTypes;\nRemotesList.defaultProps = defaultProps;\n\n\nexport default connect(mapStateToProps, {\n    getRemoteNames,\n    getFsInfo,\n    changeRemoteName,\n\n})(RemotesList);\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  valid: PropTypes.bool,\n  tooltip: PropTypes.bool\n};\nvar defaultProps = {\n  tag: 'div',\n  valid: undefined\n};\n\nvar FormFeedback = function FormFeedback(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      valid = props.valid,\n      tooltip = props.tooltip,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"valid\", \"tooltip\", \"tag\"]);\n\n  var validMode = tooltip ? 'tooltip' : 'feedback';\n  var classes = mapToCssModules(classNames(className, valid ? \"valid-\" + validMode : \"invalid-\" + validMode), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormFeedback.propTypes = propTypes;\nFormFeedback.defaultProps = defaultProps;\nexport default FormFeedback;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  size: PropTypes.string,\n  bordered: PropTypes.bool,\n  borderless: PropTypes.bool,\n  striped: PropTypes.bool,\n  dark: PropTypes.bool,\n  hover: PropTypes.bool,\n  responsive: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  tag: tagPropType,\n  responsiveTag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object])\n};\nvar defaultProps = {\n  tag: 'table',\n  responsiveTag: 'div'\n};\n\nvar Table = function Table(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      size = props.size,\n      bordered = props.bordered,\n      borderless = props.borderless,\n      striped = props.striped,\n      dark = props.dark,\n      hover = props.hover,\n      responsive = props.responsive,\n      Tag = props.tag,\n      ResponsiveTag = props.responsiveTag,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"size\", \"bordered\", \"borderless\", \"striped\", \"dark\", \"hover\", \"responsive\", \"tag\", \"responsiveTag\", \"innerRef\"]);\n\n  var classes = mapToCssModules(classNames(className, 'table', size ? 'table-' + size : false, bordered ? 'table-bordered' : false, borderless ? 'table-borderless' : false, striped ? 'table-striped' : false, dark ? 'table-dark' : false, hover ? 'table-hover' : false), cssModule);\n  var table = React.createElement(Tag, _extends({}, attributes, {\n    ref: innerRef,\n    className: classes\n  }));\n\n  if (responsive) {\n    var responsiveClassName = mapToCssModules(responsive === true ? 'table-responsive' : \"table-responsive-\" + responsive, cssModule);\n    return React.createElement(ResponsiveTag, {\n      className: responsiveClassName\n    }, table);\n  }\n\n  return table;\n};\n\nTable.propTypes = propTypes;\nTable.defaultProps = defaultProps;\nexport default Table;","import axiosInstance from \"../utils/API/API\";\nimport urls from \"../utils/API/endpoint\";\nimport {CREATE_MOUNT, GET_MOUNT_LIST, REMOVE_MOUNT, REQUEST_ERROR, REQUEST_SUCCESS} from \"./types\";\n\n/**\n * Get the current mount lists and load into state\n * @returns {function(...[*]=)}\n */\nexport const getMountList = () => {\n\treturn (dispatch) => {\n\t\taxiosInstance.post(urls.listMounts).then(res => {\n\t\t\tconsole.log(res);\n\t\t\tdispatch({\n\t\t\t\ttype: GET_MOUNT_LIST,\n\t\t\t\tstatus: REQUEST_SUCCESS,\n\t\t\t\tpayload: res.data\n\t\t\t})\n\t\t}, (error) => {\n\t\t\tdispatch({\n\t\t\t\ttype: GET_MOUNT_LIST,\n\t\t\t\tstatus: REQUEST_ERROR,\n\t\t\t\tpayload: error\n\t\t\t})\n\t\t})\n\t}\n}\n\n/**\n * Add a new mount location\n * @param fs\t\t\t\t\t\t{string}\tName of the remote eg mydrive:\n * @param mountPoint\t\t\t\t{string}\tPath to mount on the local filesystem where rclone is running\n * @param mountType\t\t\t\t\t{string}\tOne of \"cmount\", \"mount\", \"mount2\": Specifies what mountType rclone should use\n * @returns {function(...[*]=)}\n */\nexport const addMount = (fs, mountPoint, mountType) => {\n\tif (!fs.endsWith(\":\")) fs = fs + \":\";\n\tconst type = CREATE_MOUNT\n\treturn (dispatch) => {\n\t\taxiosInstance.post(urls.createMount, {fs, mountPoint, mountType}).then(res => {\n\t\t\tdispatch({\n\t\t\t\ttype,\n\t\t\t\tstatus: REQUEST_SUCCESS,\n\t\t\t\tpayload: res.data\n\t\t\t})\n\t\t}, (error) => {\n\t\t\tdispatch({\n\t\t\t\ttype,\n\t\t\t\tstatus: REQUEST_ERROR,\n\t\t\t\tpayload: error\n\t\t\t})\n\t\t})\n\t\tdispatch(getMountList());\n\n\t}\n}\n\n/**\n * unmount removes an mounted location \"mountPoint\"\n * @param mountPoint                {string}    Path to location where the mount was created.\n * @returns {function(...[*]=)}\n */\nexport const unmount = (mountPoint) => {\n\tconst type = REMOVE_MOUNT;\n\treturn (dispatch) => {\n\t\taxiosInstance.post(urls.removeMount, {mountPoint}).then(res => {\n\t\t\tdispatch({\n\t\t\t\ttype,\n\t\t\t\tstatus: REQUEST_SUCCESS,\n\t\t\t\tpayload: res.data\n\t\t\t})\n\n\t\t}, (error) => {\n\t\t\tdispatch({\n\t\t\t\ttype,\n\t\t\t\tstatus: REQUEST_ERROR,\n\t\t\t\tpayload: error\n\t\t\t})\n\t\t})\n\t\tdispatch(getMountList());\n\t}\n}\n\n\n/**\n * unmountAll removes all mounts created by mount/mount\n * @returns {function(...[*]=)}\n */\nexport const unmountAll = () => {\n\tconst type = REMOVE_MOUNT;\n\treturn (dispatch) => {\n\t\taxiosInstance.post(urls.unmountAll).then(res => {\n\t\t\tdispatch({\n\t\t\t\ttype,\n\t\t\t\tstatus: REQUEST_SUCCESS,\n\t\t\t\tpayload: res.data\n\t\t\t})\n\n\t\t}, (error) => {\n\t\t\tdispatch({\n\t\t\t\ttype,\n\t\t\t\tstatus: REQUEST_ERROR,\n\t\t\t\tpayload: error\n\t\t\t})\n\t\t})\n\t\tdispatch(getMountList());\n\t}\n}\n","import React, {useState} from 'react';\nimport {\n    Button,\n    Col,\n    FormFeedback,\n    FormGroup,\n    Input,\n    Label,\n    Modal,\n    ModalBody,\n    ModalFooter,\n    ModalHeader\n} from 'reactstrap';\nimport RemotesList from \"../Explorer/RemotesList\";\nimport * as PropTypes from \"prop-types\"\n\n/**\n * New Mount Modal shows a button for opening a modal for new mount and then executes okHandle when positive\n * button is clicked\n * @param props\n * @returns {*}\n * @constructor\n */\nconst NewMountModal = (props) => {\n    const {\n        buttonLabel,\n        className,\n        okHandle\n\n    } = props;\n\n    const [modal, setModal] = useState(false);\n\n    const [mountFs, setMountFs] = useState(\"\");\n\n    const [mountPoint, setMountPoint] = useState(\"\");\n\n    const toggle = () => setModal(!modal);\n\n    const handleCreateMount = () => {\n        if (!okHandle) {\n            throw new Error(\"Ok handle is null\");\n        }\n        okHandle(mountFs, mountPoint);\n    }\n\n    const isCreateDisabled = () => {\n        return !mountFs || !mountPoint;\n    }\n\n    return (\n        <div data-test=\"newMountModalComponent\">\n            <Button color=\"primary\" onClick={toggle}>{buttonLabel}</Button>\n            <Modal isOpen={modal} toggle={toggle} className={className}>\n                <ModalHeader toggle={toggle}>New Mount</ModalHeader>\n                <ModalBody>\n                    <FormGroup row>\n                        <Label for={\"mountFs\"} sm={5}>Fs</Label>\n                        <Col sm={7}>\n                            <RemotesList\n                                remoteName={mountFs}\n                                handleChangeRemoteName={setMountFs}\n                            />\n                            <FormFeedback/>\n                        </Col>\n                    </FormGroup>\n                    {mountFs && <FormGroup row>\n                        <Label for={\"mountPoint\"} sm={5}>Mount Point</Label>\n                        <Col sm={7}>\n                            <Input type={\"text\"} value={mountPoint}\n                                   name={\"mountPoint\"}\n                                   id={\"mountPoint\"} onChange={e => setMountPoint(e.target.value)} required={true}>\n\n                            </Input>\n                            <FormFeedback/>\n\n                        </Col>\n                    </FormGroup>}\n\n                </ModalBody>\n                <ModalFooter>\n                    <Button data-test=\"ok-button\" color=\"primary\" onClick={handleCreateMount}\n                            disabled={isCreateDisabled()}>Create</Button>{' '}\n                    <Button data-test=\"cancel-button\" color=\"secondary\" onClick={toggle}>Cancel</Button>\n                </ModalFooter>\n            </Modal>\n        </div>\n    );\n}\n\nNewMountModal.propTypes = {\n    /**\n     * Text for open modal button\n     */\n    buttonLabel: PropTypes.string,\n    /**\n     * Class for open modal button\n     */\n    buttonClass: PropTypes.string,\n    /**\n     * Function to be called when ok button is clicked.\n     */\n    okHandle: PropTypes.func.isRequired,\n}\n\nexport default NewMountModal;","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {Button, Col, Row, Table} from \"reactstrap\";\nimport * as PropTypes from \"prop-types\";\nimport {addMount, getMountList, unmount, unmountAll} from \"../../actions/mountActions\";\nimport NewMountModal from \"./NewMountModal\";\n\n/**\n * MountDashboard is the main page for mounting and unmounting drives.\n */\nclass MountDashboard extends React.Component {\n\n\tconstructor(props, context) {\n\t\tsuper(props, context);\n\t\tthis.state = {\n\t\t\tshowNewMountCard: false,\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tconst {getMountList} = this.props;\n\t\tgetMountList();\n\t}\n\n\n\thandleRemoveMount = (item) => {\n\t\tconst {unmount} = this.props;\n\t\tunmount(item.MountPoint);\n\t}\n\n\thandleCreateNewMount = (mountFs, mountPoint) => {\n\t\tconst {addMount} = this.props;\n\t\taddMount(mountFs, mountPoint, \"\");\n\t}\n\n\thandleUnmountAll = () => {\n\t\tconst {unmountAll} = this.props;\n\t\tunmountAll();\n\t}\n\n\n\trender() {\n\t\tconst {currentMounts} = this.props;\n\t\treturn (\n\t\t\t<div data-test=\"mountDashboardComponent\">\n\t\t\t\t<Row>\n\t\t\t\t\t<Col lg={12} className=\"mb-4 d-flex justify-content-between\">\n\t\t\t\t\t\t<NewMountModal buttonLabel=\"Create new mount\" okHandle={this.handleCreateNewMount}/>\n\t\t\t\t\t\t<Button className={\"float-right\"} color=\"danger\" onClick={this.handleUnmountAll}>Unmount\n\t\t\t\t\t\t\tall</Button>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Table responsive className=\"table-striped\">\n\t\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>No.</th>\n\t\t\t\t\t\t<th>Mount Point</th>\n\t\t\t\t\t\t<th>Mounted since</th>\n\t\t\t\t\t\t<th>Fs</th>\n\t\t\t\t\t\t<th>Actions</th>\n\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t{\n\t\t\t\t\t\tcurrentMounts && currentMounts.map((item, index) => {\n\t\t\t\t\t\t\t\treturn (<tr key={item.MountPoint}>\n\t\t\t\t\t\t\t\t\t<td>{index}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.MountPoint}</td>\n\t\t\t\t\t\t\t\t\t<td>{new Date(item.MountedOn).toLocaleTimeString()}</td>\n\t\t\t\t\t\t\t\t\t<td>{item.Fs}</td>\n\t\t\t\t\t\t\t\t\t<td><Button color=\"danger\" onClick={() => this.handleRemoveMount(item)}>Unmount</Button>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t</tr>);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)\n\n\t\t\t\t\t}\n\t\t\t\t\t</tbody>\n\t\t\t\t</Table>\n\n\t\t\t</div>);\n\t}\n}\n\nconst mapStateToProps = state => ({\n\tcurrentMounts: state.mount.currentMounts,\n});\n\nMountDashboard.propTypes = {\n\t// currentMounts: PropTypes.object.isRequired,\n\tcurrentMounts: PropTypes.arrayOf(PropTypes.object).isRequired,\n\tgetMountList: PropTypes.func.isRequired,\n\taddMount: PropTypes.func.isRequired,\n\tunmount: PropTypes.func.isRequired\n};\n\nexport default connect(mapStateToProps, {getMountList, addMount, unmount, unmountAll})(MountDashboard);\n"],"sourceRoot":""}